#lang plai
#|(test <result-expr> <expected-expr>)|#




(define (POW z w)
  (if (= w 0)
      1
  (* z (POW z (- w 1)))))

(test (POW 1 0) 1)
(test (POW 2 1) 2)
(test (POW 5 5) 3125)
(test (POW 100 20) 10000000000000000000000000000000000000000)
(test (POW 7 7) 823543)    
                   

#|#$(define (average lista)
  (empty? lista)
  0
  (/ suma(lista) length(lista)))

(define (suma lista)
  ((empty? lista) 0)
  ((empty? (cdr lista)) (car lista))
  (+ (car lista) (suma(cdr lista))))

(suma '(1 2 3))|#

 #|SECCIÓN  #2 |#
  #|1.mconcat - Dadas dos listas, regresa la concatenación de la primera con la segunda.|#
(define (mconcat l1 l2)
  (if(empty? l1)l2
     (cons (car l1) (mconcat (cdr l1) l2))))

(test (mconcat '(1234)'(2345))'(1234 2345))
(test (mconcat '(123) '(2223)) '(123 2223))
(test(mconcat '() '()) '())
(test(mconcat '(1) '()) '(1))
(test(mconcat '(2222222) '(333333)) '(2222222 333333))



#|2.mmap - Dada una función de aridad 1 y una lista, regresar una lista con la aplcicación de la función a cada 
uno de los elementos de la lista original|#
(define (mmap f l)
  (if(empty? l)empty
     (cons (f (car l)) (mmap f (cdr l)))))

#|3.mfilter - Dado un predicado de un argumento y una lista, regresa la lista original sin los elementos que al aplicar
el predicado, regrese falso|#
(define (mfilter p l)
  (cond
    [(empty? l) empty]
    [(eq? (p (car l)) #t) (cons (car l) (mfilter p (cdr l)))]
    [else (mfilter p (cdr l))]))
